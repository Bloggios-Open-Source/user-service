server:
  port: 8002
  servlet:
    context-path: /user-service/v${application.version}
spring:
  servlet:
    multipart:
      max-file-size: 100MB
      max-request-size: 100MB
  application:
    name: user-service # Application name
  kafka:
    bootstrap-servers: ${BOOTSTRAP_SERVER} # Kafka Broker host and port
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      properties:
        spring.json.add.type.headers: false
    consumer:
      auto-offset-reset: latestI want
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
      properties:
        spring.deserializer.value.delegate.class: org.springframework.kafka.support.serializer.JsonDeserializer
        spring.json.trusted.packages: com.bloggios.authserver
  datasource:
    url: jdbc:postgresql://${POSTGRES_HOST}:5432/${POSTGRES_DATABASE}?currentSchema=user-service
    hikari:
      username: ${POSTGRES_USERNAME} #Postgres Database username
      password: ${POSTGRES_PASSWORD} #Postgres Database password
      maximum-pool-size: ${POSTGRES_POOL_SIZE:100}
      minimum-idle: ${POSTGRES_IDLE:7}
      leak-detection-threshold: 120000
      max-lifetime: 1800000
      idle-timeout: 600000
      connection-timeout: 600000
  jpa:
    hibernate:
      ddl-auto: update # To automatically create and update tables

application:
  version: @version@ #Fetching version from pom.xml
  profile: ${ACTIVE_PROFILE:local}

elasticsearch:
  server: ${ES_SERVER}
  username: ${ES_USERNAME}
  password: ${ES_PASSWORD}
  indices:
    profile: ${ACTIVE_PROFILE:local}.auth-server.profile

security-config:
  key-provider:
    public-key: classpath:security/pubkey.pem
    private-key: classpath:security/privkey.pem
  exclude:
    paths:
      - /actuator/**

eureka:
  instance:
    hostname: localhost
  client:
    service-url:
      defaultZone: ${EUREKA_URL:localhost}
    enabled: false
management:
  endpoint:
    health:
      show-details: always
  endpoints:
    web:
      exposure:
        include: prometheus

feign:
  email-service: ${BASE_URL}